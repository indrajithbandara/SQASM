0x24af030
Generating code...
Printing statement list...
0x24af000
0x24af120
0x24af1f0
0x24af2d0
0x24af3e0
0x24af530
0x24af640
Test to see if code generated yet or not

Printing getGlobalContext() 

Generating code for 20NVariableDeclaration
Creating variable declaration int i0
Generating code for 20NVariableDeclaration
Creating variable declaration int i1
Generating code for 20NVariableDeclaration
Creating variable declaration int i2
Generating code for 20NVariableDeclaration
Creating variable declaration int i3
Generating code for 20NExpressionStatement
Generating code for 11NAssignment
Creating assignment for i0
Creating binary operation 275
Creating integer: 2
Creating integer: 4
Generating code for 20NExpressionStatement
Generating code for 11NAssignment
Creating assignment for i1
Creating binary operation 277
Creating integer: 2
Creating identifier reference: i0
Generating code for 20NExpressionStatement
Generating code for 11NAssignment
Creating assignment for i3
Creating binary operation 276
Creating identifier reference: i0
Creating identifier reference: i2
Creating block
Roots type is 6NBlock
Code is generated.
outs type = N4llvm14raw_fd_ostreamE
; ModuleID = 'main'

@.str = private constant [4 x i8] c"%d\0A\00"

declare i32 @printf(i8*, ...)

define internal void @echo(i64 %toPrint) {
entry:
  %0 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i64 %toPrint)
  ret void
}

define internal void @main() {
entry:
  %i0 = alloca i64
  %i1 = alloca i64
  %i2 = alloca i64
  %i3 = alloca i64
  %0 = sub i64 4, 2
  store i64 %0, i64* %i0
  %1 = load i64* %i0
  %2 = sdiv i64 %1, 2
  store i64 %2, i64* %i1
  %3 = load i64* %i0
  %4 = load i64* %i2
  %5 = mul i64 %4, %3
  store i64 %5, i64* %i3
  ret void
}
